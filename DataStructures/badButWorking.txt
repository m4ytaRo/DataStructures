    void rehash() {
        Line* newTable = nullptr;
        for (int attempt = 0; attempt < 5; ++attempt) {
            //global attempts to rehash
            size_t newSize = size_;
            newSize = getNextSize(newSize);
            delete[] newTable;
            newTable = new Line[newSize];

            bool flagSuccessfullyTransitioned = true;

            for (int i = 0; i < size_; ++i) { //going through all previous table
                if (!table_[i].key_)
                    continue;
                const size_t initialHash = calculateHash(*table_[i].key_, newSize);
                size_t pos = initialHash;
                bool flagPositionFound = false;
                for (size_t j = 0; j < newSize; ++j) {  //trying to calculate hash exactly newSize times

                    pos = quadraticProbe(pos, j, newSize);
                    if (!newTable[pos].key_ || newTable[pos].isDeleted_) {
                        if (newTable[pos].isDeleted_) {
                            delete newTable[pos].key_;
                        }
                        newTable[pos].key_ = new Key(*table_[i].key_);
                        newTable[pos].isDeleted_ = false;
                        flagPositionFound = true;
                        break;
                    }

                }
                if (!flagPositionFound) { //if we didnt find position for at least one object, we need to rehash
                    flagSuccessfullyTransitioned = false;
                    break;
                }
            }
            if (flagSuccessfullyTransitioned) {
                delete[] table_;
                table_ = newTable;
                size_ = newSize;
                return;
            }

        }
        delete[] newTable;
        throw std::runtime_error("Unexpected error while rehashing\n");
    }